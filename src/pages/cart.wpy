<style lang="scss" scoped>
  @import '../scss/common';
  .cart-container {
    height: 100%;
  }
  .check-box {
    position: relative;
    display: flex;
    align-items: center;
    width: 65rpx;
    .icon {
      width: 40rpx;
      height: 40rpx;
    }
    .iconfont {
      font-size: 40rpx;
      color: $mainColor;
    }
    .invalid-label {
      position: absolute;
      top: 50%;
      width: 60rpx;
      height: 30rpx;
      line-height: 30rpx;
      text-align: center;
      font-size: 16rpx;
      color: #fff;
      background: #999;
      border-radius: 4rpx;
      margin: -15rpx 0 0 -20rpx;
    }
  }
  .top-box {
    display: flex;
    height: 90rpx;
    align-items: center;
    padding: 0 40rpx;
    justify-content: space-between;
    background: #fff;
    font-size: 34rpx;
    border-bottom: 1rpx solid $borderColor;
    .left-box {
      display: flex;
    }
    .shop-name {
      color: $mainColor;
    }
    .btn {
      color: $black;
    }
  }
  .goods-list {
    background: #fff;
    overflow: hidden;
    margin-bottom: 92rpx;
  }
  .swipe-item-wrapper {
    .goods {
      border-bottom: 1rpx solid $borderColor;
    }
    &:last-child .goods {
      border: none;
    }
  }
  .goods {
    display: flex;
    margin-left: 40rpx;
    padding: 30rpx 40rpx 30rpx 0;
    position: relative;
    .goods-pic {
      width: 150rpx;
      height: 150rpx;
      border-radius: 8rpx;
    }
    .delete {
      position: absolute;
      right: 0;
      top: 0;
      height: 100%;
      bottom: 0;
      width: 120rpx;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 26rpx;
      background-color: rgb(244, 51, 60);
    }
    .goods-info {
      flex: 1;
      padding-left: 30rpx;
      .line-box {
        display: flex;
        align-items: center;
        justify-content: space-between;
        .goods-tags{
          display: flex;
          justify-content: end;
          align-items: center;
          >text{
            margin-left: 8rpx;
            background-color: $mainColor;
            height: 28rpx;
            font-size: $fontSize5;
            color:#fff;
            padding:2rpx 8rpx;
            border-radius: 5rpx;

          }
        }
      }
      .quantity-box {
        height: 100rpx;
      }
      .name {
        font-size: 34rpx;
        color: $black;
        line-height: 50rpx;
        height: 100rpx;
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
      }
      .intro {
        font-size: $fontSize4;
        line-height: 46rpx;
        color: $gray;
      }
      .price {
        font-size: 34rpx;
        color: $priceRed;
      }
      .num {
        font-size: 32rpx;
        color: #2f3336;
      }
      .labels {
        display: flex;
        align-items: center;
        text-align: right;
        .item {
          display: inline-block;
          width: 28rpx;
          height: 28rpx;
          line-height: 28rpx;
          text-align: center;
          background: $mainColor;
          color: #fff;
          font-size: 20rpx;
          margin-left: 10rpx;
          border-radius: 4rpx;
        }
      }
    }
  }
  .cart-bottom {
    height: 92rpx;
    background: #fff;
    position: fixed;
    z-index: 50;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    .left {
      display: flex;
      flex: 1;
      justify-content: space-between;
      align-items: center;
      padding: 0 40rpx;
      font-size: 28rpx;
      .select {
        display: flex;
      }
      .price {
        color: $priceRed;
      }
      .intro {
        color: $gray;
        text-align: center;
        font-size: 20rpx;
        margin-right: 12rpx;
      }
      .result {
        display: flex;
        justify-content: center;
        align-items: center;

      }
    }
    .btn {
      width: 210rpx;
      line-height: 98rpx;
      text-align: center;
      background: $priceRed;
      color: #fff;
      font-size: 34rpx;
    }
  }
</style>

<template>
  <view class="cart-container">
    <view class="top-box">
      <view class="left-box">
        <view class="check-box" @tap="checkAllCart">
          <i class="iconfont icon-info_kick" wx:if="{{checkAll}}"></i>
          <image class="icon" src="{{imageUrl + '/ic-check.png'}}" wx:else></image>
        </view>
        <text class="shop-name">{{project.projectName}}</text>
      </view>
      <view>
        <view class="btn" @tap="editGoods">{{editBtnStatus? '完成' : '编辑'}}</view>
      </view>
    </view>
    <view class="goods-list" wx:if="{{list.length > 0}}">
      <repeat for="{{list}}" key="index" index="index" item="item">
        <SwiperDelete :swipeData.sync="item" :index="index" :stopAnimate.sync="editBtnStatus" @delItem.user="deleteCart">
          <view class="goods">
            <view class="check-box" wx:if="{{item.invalid}}">
              <view class="invalid-label">失效</view>
            </view>
            <view class="check-box" wx:else @tap="check({{item.shoppingCart.shoppingCartId}}, {{index}})">
              <i class="iconfont icon-info_kick" wx:if="{{item.checked}}"></i>
              <image class="icon" src="{{imageUrl + '/ic-check.png'}}" wx:else></image>
            </view>
            <image class="goods-pic" src="{{item.product.productThumbnail}}" @tap="routerTo('/pages/goods/detail?id={{item.product.productId}}')" />
            <view class="goods-info">
              <view wx:if="{{editBtnStatus === 1}}" class="quantity-box">
                <Quantity :quantity.sync="item.quantity" @change.user="num" :index="index" />
              </view>
              <view class="name" @tap="routerTo('/pages/goods/detail?id={{item.product.productId}}')" wx:else>{{item.product.productName}}</view>
              <view class="line-box">
                <view class="intro"><text wx:if="{{item.productTpExtend}}">{{item.productTpExtend.productSkuName}}</text></view>
                <view class="goods-tags">
                  <text class="member-price" wx:if="{{item.product.isShowMemberPrice===1}}">会员价￥{{item.productTpExtend.memberPrice}}</text>
                </view>
                <!--<view class="labels" wx:if="{{editBtnStatus === 0}}">-->
                <!-- <view class="item">团</view>
                <view class="item">限</view> -->
                <!--</view>-->
              </view>
              <view class="line-box">
                <view class="price" wx:if="{{item.productTpExtend}}">￥{{item.productTpExtend.productTpPrice}}</view>
                <view class="price" wx:else>￥{{item.product.productPrice}}</view>
                <view class="num" wx:if="{{editBtnStatus === 0}}">X{{item.shoppingCart.buyingNum}}</view>
              </view>
            </view>
            <view class="delete" wx:if="{{editBtnStatus === 1}}" @tap="deleteCart({{item}})">
              删除
            </view>
          </view>
        </SwiperDelete>
      </repeat>
    </view>
    <Empty title="购物车空空如也" subtitle="去逛逛吧" :fixed.sync="emptyFixed" wx:else/>
    <view class="cart-bottom">
      <view class="left">
        <view class="select">
          <view class="check-box" @tap="checkAllCart">
            <i class="iconfont icon-info_kick" wx:if="{{checkAll}}"></i>
            <image class="icon" src="{{imageUrl + '/ic-check.png'}}" wx:else></image>
          </view>
          <view>全选</view>
        </view>
        <view class="result">
          <view class="intro">不含运费</view>
          <view>合计：<text class="price">¥{{checkedPrice}}</text></view>
        </view>
      </view>
      <view class="btn" wx:if="{{editBtnStatus === 1}}" @tap="deleteAll">删除</view>
      <view class="btn" wx:else @tap="submit">结算</view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import base from '@/mixins/base'
  import router from '@/mixins/router'
  import SwiperDelete from '@/components/common/swiper_delete'
  import Quantity from '@/components/zanui/quantity'
  import cart from '@/api/cart'
  import Tips from '@/utils/Tips'
  import Empty from '@/components/common/empty'
  import { connect } from 'wepy-redux'
  import { cartInit } from '@/store/actions'
  import dis from '@/api/dis'
  @connect({
    cartList(state) {
      return state.cart.list
    },
    project(state) {
      return state.common.project
    }
  }, {
    cartInit
  })
  export default class CartPage extends wepy.page {
    config = {
      navigationBarTitleText: '购物车'
    }
    components = {
      SwiperDelete,
      Quantity,
      Empty
    }
    data = {
      init: false,
      firstLoading: true,
      emptyFixed: true,
      editBtnStatus: 0, // 0编辑 1完成
      list: [],
      validIds: [],
      checkIds: new Set(),
      isMember: ''  // 是否是会员
    }
    mixins = [base, router]
    computed = {
      checkAll() {
        return this.checkIds.size === this.validIds.length && this.checkIds.size !== 0
      },
      checkedPrice() {
        let sum = 0
        const isMember = this.isMember
        this.list.map((item) => {
          if (item.checked) {
            const isShowMemberPrice = item.product.isShowMemberPrice
            if (item.productTpExtend) {
              const price = isMember && isShowMemberPrice ? item.productTpExtend.memberPrice : item.productTpExtend.productTpPrice
              sum += price * item.shoppingCart.buyingNum
            } else {
              const price = isMember && isShowMemberPrice ? item.productTpExtend.memberPrice : item.productTpExtend.productTpPrice
              sum += price * item.shoppingCart.buyingNum
            }
          }
        })
        return sum.toFixed(2)
      }
    }
    methods = {
      // 编辑
      editGoods() {
        let lists = JSON.parse(JSON.stringify(this.list))
        this.editBtnStatus = this.editBtnStatus === 0 ? 1 : 0
        lists.map((item, index, arr) => {
          // item.style = this.editBtnStatus ? -120 : 0
          item.style = 0
        })
        this.list = lists
        this.$apply()
      },
      // 删除单个
      async deleteCart(item) {
        let cartId = item.shoppingCart.shoppingCartId
        let param = {
          shoppingCartId: cartId
        }
        await cart.deleteOne(param)
        this.getList()
      },
      // 全部删除
      async deleteAll() {
        let checkIds = Array.from(this.checkIds)
        let param = {
          shoppingCartIds: checkIds
        }
        await cart.deleteAll(param)
        this.getList()
      },
      // 改变数量
      async num({
        componentId,
        quantity,
        index
      }) {
        let param = {
          shoppingCartId: componentId,
          buyingNum: quantity
        }
        await cart.updateNum(param)
        this.getList()
      },
      // 选中
      check(cartId, index) {
        this.list[index].checked = !this.list[index].checked
        if (Array.from(this.checkIds).includes(cartId)) {
          this.checkIds.delete(cartId)
        } else {
          this.checkIds.add(cartId)
        }
      },
      // 全选购物车
      checkAllCart() {
        if (!this.checkAll) {
          this.checkIds = new Set(this.validIds)
          let checkIds = Array.from(this.checkIds)
          this.list.map((item) => {
            item.checked = checkIds.includes(item.shoppingCart.shoppingCartId)
          })
        } else {
          this.checkIds = new Set()
          this.list.map((item) => {
            item.checked = false
          })
        }
      },
      // 结算
      submit() {
        if (this.checkIds.size === 0) {
          Tips.toast('请选择商品', null, 'none')
          return false
        }
        let checkIds = Array.from(this.checkIds).join(',')
        let page = `/pages/order/submit?f=cart&cs=${checkIds}`
        this.$root.$navigate(page)
      }
    }
    async onLoad() {
      // 检测是否是会员
      await dis.getMemberInfo().then((res) => {
        this.isMember = res.applyStatus === 0
      })
      this.getList()
      if (!this.firstLoading) return
      this.firstLoading = false
    }
    // 获取购物车数据
    async getList() {
      Tips.loading()
      // const list = await cart.list()
      // redux中请求购物车列表
      await this.methods.cartInit()
      const list = this.cartList
      wepy.setStorageSync('cartNum', list.length)
      let checkIds = Array.from(this.checkIds)
      if (!list || list.length === 0) {
        this.list = []
        this.validIds = []
      } else {
        let ids = []
        list.map((item) => {
          item.style = 0
          item.checked = checkIds.includes(item.shoppingCart.shoppingCartId)
          if (!item.invalid) {
            ids.push(item.shoppingCart.shoppingCartId)
          }
          this.validIds = ids
        })
        this.list = list
      }
      this.$apply()
      this.loaded()
    }
    /**
     * 监听上拉加载事件
     */
    async onReachBottom() {}
    /**
     * 监听下拉刷新
     */
    async onPullDownRefresh() {
      await this.getList()
    }
    /**
     * 回到页面事件
     */
    async onRoute() {
      if (this.firstLoading) return
      this.getList()
    }
  }
</script>
